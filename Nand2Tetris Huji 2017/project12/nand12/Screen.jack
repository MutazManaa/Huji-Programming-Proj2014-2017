// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static Array twoToThe;
	static int screenMemory;
	static int screenWidth;
	static int wordWidth;
	static boolean color;

    /** Initializes the Screen. */
    function void init() {
    	let screenWidth = 32;
    	let wordWidth = 16;
    	let screenMemory = 16384;
    	let color = true;

    	let twoToThe = Array.new(16);
    	let twoToThe[0] = 1;
    	let twoToThe[1] = 2;
    	let twoToThe[2] = 4;
    	let twoToThe[3] = 8;
    	let twoToThe[4] = 16;
    	let twoToThe[5] = 32;
    	let twoToThe[6] = 64;
    	let twoToThe[7] = 128;
    	let twoToThe[8] = 256;
    	let twoToThe[9] = 512;
    	let twoToThe[10] = 1024;
    	let twoToThe[11] = 2048;
    	let twoToThe[12] = 4096;
    	let twoToThe[13] = 8192;
    	let twoToThe[14] = 16384;
    	let twoToThe[15] = twoToThe[14]+twoToThe[14];
    	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    	var int i;
    	let i = screenMemory;
    	while(i < 24576){
    		do Memory.poke(i,0);
    		let i=i+1;
    	}
    	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
    	let color = b;
    	return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
    	var int memoryLocation;
    	var int column;
    	var int row;
    	var int newWord;
    	var int bit;

		let row = screenWidth*y;
    	let column =  x/wordWidth;
    	let bit = x&15; //x - (column*wordWidth);

    	let memoryLocation = screenMemory + row + column;

    	if(color){
    		let newWord = Memory.peek(memoryLocation)| twoToThe[bit]; 
    	}else{
    		let newWord = Memory.peek(memoryLocation)& (~twoToThe[bit]); 
    	}
    	do Memory.poke(memoryLocation,newWord);
    	return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    	var int adyMbdx;
    	var int dx;
    	var int dy;
    	var int a;
    	var int b;
    	var int av;
    	var int bv;

    	let adyMbdx =0;
    	let a=0;
    	let b=0;
    	let dx = x2-x1;
    	let dy = y2-y1;
    	if(dx<0){
    		let av=-1;
            let dx = -dx;
    	}else{
    		let av=1;
    	}
        
    	if(dy<0){
    		let bv=-1;
            let dy = -dy;
    	}else{
    		let bv=1;
    	}

        if((dy=0) & (dx=0)){
            do Screen.drawPixel(x1,y1);
            return;
        }

    	while(~ ((Math.abs(a)>dx) | (Math.abs(b)>dy)) ){
    		do Screen.drawPixel(x1+a,y1+b);

            if((dy=0) | (dx =0)){
                if(dx =0){
                    let b=b+bv;
                }else{
                    let a=a+av;
                }
            }else{
                if(adyMbdx<0){
                    let a=a+av;
                    let adyMbdx = adyMbdx +dy;
                }else{
                    let b=b+bv;
                    let adyMbdx = adyMbdx - dx;
                }
            }
    	}
    	return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    	var int i;
    	var int j;
        var int x;
        var int y;

    	let y=y1;
    	while(~(y>y2)){
    		let x=x1;
    		while(~(x>x2)){
    			do Screen.drawPixel(x,y);
    			let x=x+1;
    		}
    		let y=y+1;
    	}
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    	var int dy;
    	var int dy2;
    	var int r2;
    	var int root;

    	let dy =-r;
    	let dy2 = dy*dy;
    	let r2 = r*r;
    	while(dy<(r+1)){
    		let root = Math.sqrt(r2-dy2);
    		do Screen.drawLine(x-root, y+dy, x+root, y+dy);
            let dy2 = dy2 +dy;
            let dy = dy+1;
            let dy2 = dy2 +dy;
    	}
        return;
    }
}