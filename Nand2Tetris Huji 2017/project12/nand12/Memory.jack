// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array memory;
	static Array freeList;
	static int heapStart;
	static int heapEnd;

    /** Initializes the class. */
    function void init() {
    	let memory =0;
    	let heapStart = 2048;
    	let heapEnd = 16384;
    	let freeList = heapStart;
    	let freeList[0] = 14336;
    	let freeList[1] = -1;

    	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
    	return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
    	let memory[address] =value;
    	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
    	var Array block;
    	var Array bestFit;
    	var Array father;
    	var Array temp;

    	let block = freeList;
    	let bestFit =-1;
    	if(block[0]> size){
    		let father = freeList;
    		let bestFit = block;
    	}
    	while(block[1]>0){
    		let temp = block;
    		let block = block[1];
    		if(block[0]>size){
    			if(bestFit=-1){
    				let father = temp;
    				let bestFit = block;
    			}else{
    				if(block[0]<bestFit[0]){
    					let father = temp;
    					let bestFit = block;
    				}
    			}
    		}
    	}
    	if(bestFit<0){
    		return bestFit;
    	}

    	if(bestFit[0]<(size+4)){
    		let temp = bestFit[1];
    	}else{
    		let temp = bestFit+size+1;
    		let temp[0] = (bestFit[0]-size)-1;
    		let temp[1] = bestFit[1];
    	}
    	if(father = freeList){
    		let freeList = temp; 
    	}else{
    		let father[1] = temp;
    	}
    	let bestFit[0] = size+1;

    	return bestFit+1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
    	var Array block;
    	let block = o-1;
    	let block[1] = freeList;
    	let freeList = block;
    	return;
    }    
}
