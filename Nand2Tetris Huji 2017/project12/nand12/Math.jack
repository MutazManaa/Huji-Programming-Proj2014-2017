// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static int qy2;
	static Array twoToThe;

    /** Initializes the library. */
    function void init() {
    	let twoToThe = Array.new(16);
    	let twoToThe[0] = 1;
    	let twoToThe[1] = 2;
    	let twoToThe[2] = 4;
    	let twoToThe[3] = 8;
    	let twoToThe[4] = 16;
    	let twoToThe[5] = 32;
    	let twoToThe[6] = 64;
    	let twoToThe[7] = 128;
    	let twoToThe[8] = 256;
    	let twoToThe[9] = 512;
    	let twoToThe[10] = 1024;
    	let twoToThe[11] = 2048;
    	let twoToThe[12] = 4096;
    	let twoToThe[13] = 8192;
    	let twoToThe[14] = 16384;
    	let twoToThe[15] = twoToThe[14]+twoToThe[14];
    	return;
    }

    /**Returns true if the j-th bit of the integer x is 1 and false otherwise*/
    function boolean bit(int x, int j){
    	return ~( x&twoToThe[j] = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    	if(x<0){
    		return -x;
    	}else{
    		return x;
    	}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	var int sum;
    	var int shiftedX;
    	var int j;

    	if(y<0){
    		let y= -y;
    		let x= -x;
    	}

    	let sum = 0;
    	let shiftedX = x;
    	let j=0;
    	while(j<16){
    		if(Math.bit(y,j)){
    			let sum = sum+ shiftedX;
    		}
    		let j = j+1;
    		let shiftedX = shiftedX + shiftedX;
    	}
    	return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    	var int q;
    	var boolean sign;
    	var int result;

    	// managing signs
    	let sign = true;
    	if(y<0){
    		let y= -y;
    		let x= -x;
    	}
    	if(x<0){
    		let x=-x;
    		let sign =false;
    	}

    	//base case
    	if(x<y){
    		return 0;
    	}
    	let qy2 =0;

    	//checking for overflow
    	if((y+y)>0){
    		let q = Math.divide(x,y+y);
		}else{
			let q = 0;
		}

    	// let qy2 = qy2 + qy2;
    	if(Math.bit(q,0)){
    		let qy2 = qy2 + y + y;
    	}
    	if((x-qy2)<y){
    		let result = q+q;
    	}else{
    		let result = q+q +1;
    	}

    	if(sign){
    		return result;
    	}else{
    		return -result;
    	}


    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    	var int y;
    	var int j;
    	var int mul;

    	let y =0;

    	let j =7;
    	while(j>(-1)){
   			let mul = (y+ twoToThe[j])*(y+twoToThe[j]);
    		if( (~(mul<0)) & (~( mul >x))){
    			let y = y +twoToThe[j];
    		}
    		let j = j-1;
    	}
    	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    	if(a>b){
    		return a;
    	}else{
    		return b;
    	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	if(a>b){
    		return b;
    	}else{
    		return a;
    	}
    }
}
